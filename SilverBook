#include <iostream>
#include <string>
#include <vector>
#include "SilverCheckpoint.h"

class SilverBook {
public:
    SilverBook(int ID, std::string name, bool if_complete) : ID(ID), name(name), if_complete(if_complete) {}

    int getID() const {
        return ID;
    }

    void setID(int newID) {
        ID = newID;
    }

    std::string getName() const {
        return name;
    }

    void setName(std::string newName) {
        name = newName;
    }

    void getIf_completed() const{
        return if_completed;
    }
    
    void setIf_complete(bool newIf_complete) {
        if_complete = newIf_complete;
    }

    std::vector<SilverCheckpoint>& getCheckpoints() {
        return checkpoints;
    }

    void addCheckpoint(const SilverCheckpoint& checkpoint) {
        checkpoints.push_back(checkpoint);
    }

    void removeCheckpoint(int checkpointID) {
        for (auto it = checkpoints.begin(); it != checkpoints.end(); ++it) {
            if (it->getID() == checkpointID) {
                checkpoints.erase(it);
                break;
            }
        }
    }

private:
    int ID;
    std::string name;
    std::vector<SilverCheckpoint> checkpoints;
    bool if_completed;
};
