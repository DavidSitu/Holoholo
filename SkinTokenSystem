#include <string>
#include <vector>
#include <unordered_map>

class SkinTokenSystem {
public:
    // Constructor that initializes the SkinToken value and total supply
    SkinTokenSystem(float value, int totalSupply) {
        m_value = value;
        m_totalSupply = totalSupply;
    }

    // Function to award a SkinToken to a user
    void awardToken(std::string userId) {
        m_userBalances[userId] += 1;
    }

    // Function to get the balance of a user's SkinTokens
    int getBalance(std::string userId) const {
        if (m_userBalances.count(userId) > 0) {
            return m_userBalances.at(userId);
        } else {
            return 0;
        }
    }

    // Function to make a transaction using SkinTokens
    bool makeTransaction(std::string senderId, std::string receiverId, int amount) {
        if (m_userBalances.count(senderId) == 0 || m_userBalances[senderId] < amount) {
            // Insufficient balance to make transaction
            return false;
        } else {
            // Subtract SkinTokens from sender and add to receiver
            m_userBalances[senderId] -= amount;
            m_userBalances[receiverId] += amount;
            return true;
        }
    }

private:
    float m_value;  // Value of each SkinToken
    int m_totalSupply;  // Total supply of SkinTokens
    std::unordered_map<std::string, int> m_userBalances;  // Map of user IDs to SkinToken balances
};
