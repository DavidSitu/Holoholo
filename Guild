#include <string>
#include <vector>
#include <unordered_map>

class Guild {
public:
    enum class Role {
        Leader,
        Officer,
        Member,
    };

    Guild(std::string name, std::string creatorId) {
        m_name = name;
        m_creatorId = creatorId;
        m_goldBalance = 0;
    }

    void addMember(std::string memberId) {
        m_memberIds.push_back(memberId);
        m_memberBalances[memberId] = 0;
        m_memberRoles[memberId] = Role::Member;
    }

    void removeMember(std::string memberId) {
        for (auto it = m_memberIds.begin(); it != m_memberIds.end(); ++it) {
            if (*it == memberId) {
                m_memberIds.erase(it);
                break;
            }
        }
        m_memberBalances.erase(memberId);
        m_memberRoles.erase(memberId);
    }

    bool isMember(std::string userId) const {
        for (auto it = m_memberIds.begin(); it != m_memberIds.end(); ++it) {
            if (*it == userId) {
                return true;
            }
        }
        return false;
    }

    int getNumMembers() const {
        return m_memberIds.size();
    }

    std::string getName() const {
        return m_name;
    }

    std::string getCreatorId() const {
        return m_creatorId;
    }

    std::vector<VirtualItem> getVirtualItems() const {
        return m_virtualItems;
    }

    void addVirtualItem(VirtualItem item) {
        m_virtualItems.push_back(item);
    }

    bool removeVirtualItem(std::string itemName) {
        for (auto it = m_virtualItems.begin(); it != m_virtualItems.end(); ++it) {
            if (it->getName() == itemName) {
                m_virtualItems.erase(it);
                return true;
            }
        }
        return false;
    }

    bool buyVirtualItem(std::string memberId, std::string itemName) {
        if (!isMember(memberId)) {
            return false;
        }
        for (auto it = m_virtualItems.begin(); it != m_virtualItems.end(); ++it) {
            if (it->getName() == itemName) {
                int cost = it->getCost();
                if (m_memberBalances[memberId] >= cost) {
                    m_memberBalances[memberId] -= cost;
                    return true;
                } else {
                    return false;
                }
            }
        }
        return false;
    }


    Role getMemberRole(std::string memberId) const {
        if (m_memberRoles.count(memberId) == 0) {
            return Role::Member;
        } else {
            return m_memberRoles.at(memberId);
        }
    }

    bool setMemberRole(std::string memberId, Role role) {
        if (m_memberRoles.count(memberId) == 0) {
            return false;
        } else {
            m_memberRoles[memberId] = role;
            return true;
        }
    }

private:
    std::string m_name;
    std::string m_creatorId;
    std::vector<std::string> m_memberIds;
    std::unordered_map<std::string, int> m_memberBalances;
    std::unordered_map<std::string, Role> m_memberRoles;
    int m_goldBalance;
    std::vector<VirtualItem> m_virtualItems;
};

class GuildSystem {
public:
    GuildSystem(float holoCoinValue) {
        m_holoCoinValue =holoCoinValue;
    }

    void createGuild(std::string name, std::string creatorId) {
        Guild guild(name, creatorId);
        m_guilds.push_back(guild);
    }

    bool dissolveGuild(std::string guildName) {
        for (auto it = m_guilds.begin(); it != m_guilds.end(); ++it) {
            if (it->getName() == guildName) {
                m_guilds.erase(it);
                return true;
            }
        }
        return false;
    }

    Guild* getGuild(std::string guildName) {
        for (auto it = m_guilds.begin(); it != m_guilds.end(); ++it) {
            if (it->getName() == guildName) {
                return &(*it);
            }
        }
        return nullptr;
    }

    std::vector<Guild> getAllGuilds() const {
        return m_guilds;
    }

private:
    float m_holoCoinValue;
    std::vector<Guild> m_guilds;
};
